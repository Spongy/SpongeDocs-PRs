===================
Configuration Nodes
===================

In memory, the the configuration is represented using ``ConfigurationNode``\ s. A ``ConfigurationNode`` either holds a
value (like a number, a string or a list) or has child nodes, thus allowing for tree-like configuration structure.
When using a ``ConfigurationLoader`` to load or create a new configration, it will return you the **root node**. It is
recommended that you always keep a reference to that root node stored somewhere.

.. note::

    Depending on the ``ConfigurationLoader`` used, you might even get a ``CommentedConfigurationNode``, which in
    addition to normal ``ConfigurationNode`` behavior is able to retain a comment that will be persisted on the saved
    config file.


Navigating Nodes
================

Every child node is identified by a key, most commonly a string. When going from one node (for example the root node)
to a specific child node, it may be necessary to move through multiple layers of child nodes. The keys of the child
nodes passed make up the **path** of the target node. In the following example, there is a node holding the value
``false`` at the path ``config`` ``blockCheats`` ``enabled`` (from the root node) in the following HOCON representation
of a config.

.. note::

    When written down, paths are commonly represented by joining the keys together with a separator char, usually ``.``.
    The above mentioned path would be written ``config.blockCheats.enabled``.

.. code-block:: none

    config {
        blockCheats {
            enabled=false
        }
    }

In Java, you can get the child node for a path using the ``getNode(...)`` method. The method accepts any number of
arguments, where each argument is one key in the path. The path ``config.blockCheats.enabled`` from a root node is
acquired as follows.

.. code-block:: java

    final ConfigurationNode rootNode = ...;
    final ConfigurationNode targetNode = rootNode.getNode("config", "blockCheats", "enabled");

.. note::

    The function calls ``node.getNode("foo", "bar")`` and ``node.getNode("foo").getNode("bar")`` are equivalent.
